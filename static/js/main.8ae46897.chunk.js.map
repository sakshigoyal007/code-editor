{"version":3,"sources":["components/Editor.js","components/App.js","reportWebVitals.js","index.js"],"names":["Editor","name","value","language","onChange","useState","isOpen","setIsOpen","className","type","onClick","prevVal","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","App","html","setHtml","js","setJs","css","setCss","srcScript","srcDoc","title","sandbox","frameBorder","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRA2CeA,EA9BF,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SAClC,EAAyBC,oBAAS,GAAlC,mBAAMC,EAAN,KAAcC,EAAd,KAIA,OACI,sBAAKC,UAAS,0BAAqBF,EAAQ,GAAG,aAA9C,UACI,sBAAKE,UAAU,cAAf,UACKP,EACD,wBAAQQ,KAAK,SACbD,UAAU,gBACVE,QAAS,kBAAIH,GAAU,SAAAI,GAAO,OAAGA,MAFjC,SAIA,cAAC,IAAD,CAAiBC,KAAMN,EAAQO,IAAeC,WAGlD,cAAC,aAAD,CAAYZ,MAAOA,EACfM,UAAU,eACVO,eAhBZ,SAAsBC,EAAQC,EAAMf,GAChCE,EAASF,IAgBDgB,QAAS,CACLC,cAAa,EACbC,MAAK,EACLC,KAAKlB,EACLmB,MAAM,kBCMXC,MArCf,WAGE,MAAsBlB,mBAAS,IAA/B,mBAAOmB,EAAP,KAAaC,EAAb,KACA,EAAkBpB,mBAAS,IAA3B,mBAAOqB,EAAP,KAAWC,EAAX,KACA,EAAoBtB,mBAAS,IAA7B,mBAAOuB,EAAP,KAAYC,EAAZ,KAEMC,EAAU,qBAAD,OAEPN,EAFO,6BAGNI,EAHM,+BAILF,EAJK,yBASf,OACE,sBAAKlB,UAAU,MAAf,UACE,sBAAKA,UAAU,qBAAf,UACE,cAAC,EAAD,CAAQP,KAAK,OAAOC,MAAOsB,EAAMrB,SAAS,MAAMC,SAAUqB,IAC1D,cAAC,EAAD,CAAQxB,KAAK,MAAMC,MAAO0B,EAAKzB,SAAS,MAAMC,SAAUyB,IACxD,cAAC,EAAD,CAAQ5B,KAAK,KAAKC,MAAOwB,EAAIvB,SAAS,aAAaC,SAAUuB,OAE/D,qBAAKnB,UAAU,UAAf,SACE,wBAAQuB,OAAQD,EACdE,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,eCtBFC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8ae46897.chunk.js","sourcesContent":["import React,{ Component, useState } from 'react';\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/theme/material.css\";\r\nimport \"codemirror/mode/xml/xml\";\r\nimport \"codemirror/mode/javascript/javascript\";\r\nimport \"codemirror/mode/css/css\";\r\nimport {Controlled} from \"react-codemirror2\";\r\nimport { Pen } from '@fortawesome/free-solid-svg-icons/faPen';\r\nimport {faCompressAlt, faExpandAlt} from '@fortawesome/free-solid-svg-icons';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\n\r\n\r\n\r\nconst Editor=({name, value, language, onChange})=>{\r\n    const[isOpen, setIsOpen]=useState(true);\r\n    function handleChange(editor, data, value){\r\n        onChange(value);\r\n    }\r\n    return(\r\n        <div className={`split-container ${isOpen? '':'collapsed'}`}>\r\n            <div className=\"split-title\">\r\n                {name}\r\n                <button type=\"button\" \r\n                className=\"editor-button\"\r\n                onClick={()=>setIsOpen(prevVal=>!prevVal)}\r\n                >\r\n                <FontAwesomeIcon icon={isOpen? faCompressAlt :faExpandAlt} />\r\n                </button>\r\n            </div>\r\n            <Controlled value={value} \r\n                className=\"code-wrapper\"\r\n                onBeforeChange={handleChange}\r\n                options={{\r\n                    lineWrapping:true,\r\n                    lint:true,\r\n                    mode:language,\r\n                    theme:'material'\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Editor;","import React, {useState} from 'react';\nimport '../App.css';\nimport Editor from './Editor';\n\n\nfunction App() {\n  // let srcUrl=\"https://ideone.com\";\n\n  const [html, setHtml]=useState('');\n  const [js, setJs]=useState('');\n  const [css, setCss]=useState('');\n\n  const srcScript=`\n<html>\n  <body>${html}</body>\n  <style>${css}</style>\n  <script>${js}</script>\n</html>\n`\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"content input-code\">\n        <Editor name=\"HTML\" value={html} language=\"xml\" onChange={setHtml} />\n        <Editor name=\"CSS\" value={css} language=\"css\" onChange={setCss} />\n        <Editor name=\"JS\" value={js} language=\"javascript\" onChange={setJs} />\n      </div>\n      <div className=\"content\">\n        <iframe srcDoc={srcScript}\n          title=\"output\"\n          sandbox=\"allow-scripts\"\n          frameBorder=\"0\"\n          width=\"100%\"\n          height=\"100%\"\n        />\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}